@page "/Day21"
@rendermode InteractiveWebAssembly

<PageTitle>Day 21</PageTitle>

@* <style>
    body {
        background-image: url(/media/background19.gif);
        color: white;
    }
</style> *@

<h2>Day 21</h2>

<div style="display:table-cell">
    <textarea cols="131" rows="25" @bind="puzzleInput" />
    <div align="right">
        <input type="number" @bind="nSteps"/>
        <button @onclick="Run">Run</button>
    </div>
</div>

<hr />
<h3>Part 1:</h3>
<p>@output1</p>

<hr />
<h3>Part 2:</h3>
<table>
    @for(int i=0;i<destsByStep.Length;i++)
    {
        <tr>
            <td>@i</td>
            <td>@destsByStep[i]</td>
        </tr>
    }
</table>

<hr />
<h3>Notes</h3>
<p>At first glance, this looks like a pathfinding problem. It may be possible to modify Dijkstra's algorithm to find the longest path to each point and look for the 64s, but solving part 1 is more straightforward if you treat it as a cellular automaton. Any cell that isn't a rock is active if any of the cells next to it were active in the previous round.</p>
<p>Not a fan of part 2. Having to generate a bunch of data, copy it into statistics software (aka my TI-89), try some regression functions, generate an answer that's approximately correct (The second regression function I tried was off by 2), and then keep guessing nearby numbers until you get the star just isn't fun.</p>
<p>This page does not generate an exact answer to part 2. Instead it generates a table of the number of possible destinations after n steps. Extrapolate and guess from there.</p>

@code
{
    int output1 = 0;
    string puzzleInput = "";
    int nSteps = 64;

    record Point(int row, int col);

    int maxRow = 0;
    int maxCol = 0;
    HashSet<Point> dests = new HashSet<Point>();
    HashSet<Point> rocks = new HashSet<Point>();
    int[] destsByStep = [];

    void Run()
    {
        string[] lines = puzzleInput.Trim().Split('\n');

        dests.Clear();
        rocks.Clear();
        maxRow = lines.Length;
        maxCol = lines[0].Length;
        destsByStep = new int[nSteps + 1];

        for (int row = 0; row < maxRow; row++)
        {
            for (int col = 0; col < maxCol; col++)
            {
                if (lines[row][col] == '#')
                {
                    rocks.Add(new Point(row, col));
                }
                if (lines[row][col] == 'S')
                {
                    dests.Add(new Point(row, col));
                }
            }
        }

        for (int i = 0; i < nSteps; i++)
        {
            destsByStep[i] = dests.Count;
            Step();
        }
        destsByStep[nSteps] = dests.Count;

        output1 = destsByStep[nSteps];
    }

    void Step()
    {
        HashSet<Point> nextStep = new HashSet<Point>();

        foreach(Point p in dests)
        {
            InsertIfValid(new Point(p.row - 1, p.col), nextStep);
            InsertIfValid(new Point(p.row, p.col + 1), nextStep);
            InsertIfValid(new Point(p.row + 1, p.col), nextStep);
            InsertIfValid(new Point(p.row, p.col - 1), nextStep);
        }

        dests = nextStep;
    }

    void InsertIfValid(Point p, HashSet<Point> set)
    {
        Point modPoint = new Point((p.row % maxRow + maxRow) % maxRow, (p.col % maxCol + maxCol) % maxCol);
        if (!rocks.Contains(modPoint))
            set.Add(p);
    }
}
