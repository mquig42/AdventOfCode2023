@page "/Day17"
@rendermode InteractiveWebAssembly

<PageTitle>Day 17</PageTitle>

<style>
    body {
        background-image: url(/media/Trains.gif);
    }

    .box {
        background-color: #FBE37A;
        width: fit-content;
        border-radius: 5px;
        border: 2px solid #D6020B;
        padding: 15px;
    }
</style>

<div class="box">
    <h2 style="margin-top:0px; margin-bottom:0px;">Day 17</h2>
</div>
<br />

<div style="display:table-cell">
    <textarea cols="141" rows="25" @bind="puzzleInput" />
    <div align="right"><button @onclick="Run">Run</button></div>
</div>

<div class="box" style="float:left;">
    <h3 style="margin-top:0px">Part 1:</h3>@output1
</div>
<div style="float:left; width:20px;"><p></p></div>
<div class="box" style="float:left;">
    <h3 style="margin-top:0px">Part 2:</h3>@output2
</div>
<p style="clear: both;"></p>
<br />

<div class="box" style="width:75%;">
    <h3 style="margin-top:0px">Notes</h3>
    And here we have the pathfinding problem. I used a slight modification of Dijkstra's algorithm where each state includes a location, direction, and the distance travelled since the last turn.
</div>
<br />

<script src="https://cdn.jsdelivr.net/combine/npm/tone@14.7.58,npm/@@magenta/music@1.23.1/es6/core.js,npm/focus-visible@5,npm/html-midi-player@1.5.0"></script>
<midi-player src="/media/hollyjol.mid" autoplay>
</midi-player>

@code
{
    int output1 = 0;
    int output2 = 0;
    string puzzleInput = "";

    const int NORTH = 0;
    const int EAST = 1;
    const int SOUTH = 2;
    const int WEST = 3;
    int[] DIRECTIONS = [-1000, 1, 1000, -1];

    string[] grid = [];
    PriorityQueue<(int, int, int), int> pathQueue = new PriorityQueue<(int, int, int), int>();
    Dictionary<(int, int, int), int> visited = new Dictionary<(int, int, int), int>();

    //A pathfinding problem. Time to implement Dijkstra's algorithm again
    //Because of the limitation on straight line distance, need to track visited locations in more detail
    //Will part 2 be part 1 on a bigger map?
    //Why is the map 141x141? Why not a round number? 141 is the product of two primes (3 * 47), does that mean anything?
    //No, map is the same, just different rules on movement. No idea why it's 141x141 instead of 140x140.

    void Run()
    {
        grid = puzzleInput.Trim().Split('\n');

        pathQueue.Clear();
        visited.Clear();
        output1 = ShortestPath1();

        pathQueue.Clear();
        visited.Clear();
        output2 = ShortestPath2();
    }

    bool InBounds(int loc)
    {
        return loc >= 0 && loc < grid.Length * 1000 && loc % 1000 < grid[0].Length;
    }

    int Weight(int loc)
    {
        return grid[loc / 1000][loc % 1000] - '0';
    }

    //Adds a new PathNode to pathQueue if it is valid
    //Within the grid, and total weight would be less than any previous visits
    void EnqueueIfValid(int loc, int dir, int steps, int currentWeight)
    {
        if (!InBounds(loc))
            return;

        (int, int, int) newNode = (loc, dir, steps);

        if (currentWeight + Weight(loc) >= visited.GetValueOrDefault(newNode, int.MaxValue))
            return;

        visited[newNode] = currentWeight + Weight(loc);
        pathQueue.Enqueue(newNode, currentWeight + Weight(loc));
    }

    //Part 1 solver
    int ShortestPath1()
    {
        (int Location, int Direction, int StraightLineDistance) current = (0, EAST, 0);
        visited[current] = 0;
        int weight;
        int leftDirection, rightDirection;

        while (current.Location != (grid.Length - 1) * 1000 + grid[0].Length - 1)
        {
            weight = visited[current];
            leftDirection = (current.Direction + 3) % 4;
            rightDirection = (current.Direction + 1) % 4;

            EnqueueIfValid(current.Location + DIRECTIONS[leftDirection], leftDirection, 1, weight);
            EnqueueIfValid(current.Location + DIRECTIONS[rightDirection], rightDirection, 1, weight);
            if (current.StraightLineDistance < 3)
                EnqueueIfValid(current.Location + DIRECTIONS[current.Direction], current.Direction, current.StraightLineDistance + 1, weight);

            current = pathQueue.Dequeue();
        }

        return visited[current];
    }

    //Part 2 solver, based on part 1 but modified for different movement rules
    int ShortestPath2()
    {
        //I need the EnqueueIfValid here, because you can move either East or South from the start point, but the rules don't allow turns before 4 spaces
        //EnqueueIfValid adds the space's weight value to the given weight param, so I multiply it by -1 to ensure that a 0 gets inserted into visited.
        (int Location, int Direction, int StraightLineDistance) current = (0, EAST, 0);
        EnqueueIfValid(0, SOUTH, 0, -1 * Weight(0));
        visited[current] = 0;
        int weight;
        int leftDirection, rightDirection;

        while (current.Location != (grid.Length - 1) * 1000 + grid[0].Length - 1 || current.StraightLineDistance < 4)
        {
            weight = visited[current];
            leftDirection = (current.Direction + 3) % 4;
            rightDirection = (current.Direction + 1) % 4;

            if (current.StraightLineDistance > 3)
            {
                EnqueueIfValid(current.Location + DIRECTIONS[leftDirection], leftDirection, 1, weight);
                EnqueueIfValid(current.Location + DIRECTIONS[rightDirection], rightDirection, 1, weight);
            }
            if (current.StraightLineDistance < 10)
                EnqueueIfValid(current.Location + DIRECTIONS[current.Direction], current.Direction, current.StraightLineDistance + 1, weight);

            current = pathQueue.Dequeue();
        }

        return visited[current];
    }
}
