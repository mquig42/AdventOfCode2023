@page "/Day23"
@rendermode InteractiveWebAssembly
@using System.Collections.Immutable

<PageTitle>Day 23</PageTitle>

@* <style>
    body {
        background-image: url(/media/background22.gif);
        color: white;
    }
</style> *@

<h2>Day 23</h2>

<div style="display:table-cell">
    <textarea cols="141" rows="25" @bind="puzzleInput" />
    <div align="right"><button @onclick="Run">Run</button></div>
</div>

<hr />
<h3>Part 1:</h3>
<p>@output1</p>

<hr />
<h3>Part 2:</h3>
<p>@output2</p>

<hr />
<h3>Notes</h3>


@code
{
    int output1 = 0;
    int output2 = 0;
    string puzzleInput = "";

    record Point(int row, int col);

    //Variation on pathfinding. Find the longest route from start to end (without visiting the same location twice)
    //Question: Is it possible to represent my input as a DAG, or is it more complicated than that?
    //Based on some visualizations I saw on the subreddit, it's not a DAG.

    void Run()
    {
        string[] lines = puzzleInput.Trim().Split('\n');
        ImmutableHashSet<Point> visited = ImmutableHashSet.Create(new Point(0, 1));

        output1 = LongestPath(lines, new Point(0, 1), 0, visited);
        return;

        for (int i = 0; i < lines.Length; i++)
            lines[i] = lines[i].Replace('>', '.').Replace('v', '.').Replace('<', '.').Replace('^', '.');

        try
        {
            output2 = LongestPath(lines, new Point(0, 1), 0, visited);
        }
        catch(Exception e)
        {
            output2 = -1;
        }
    }

    //Depth first search using ImmutableHashSet to track visited points
    int LongestPath(string[] map, Point from, int steps, ImmutableHashSet<Point> visited)
    {
        //We have arrived at our destination
        if (from.row == map.Length - 1)
            return steps;

        IEnumerable<Point> dests = Dests(map, from).Where(x => !visited.Contains(x));
        if (dests.Count() == 0)
            return 0;
        if (dests.Count() == 1)
            return LongestPath(map, dests.First(), steps + 1, visited.Add(dests.First()));
        return dests.Select(x => LongestPath(map, x, steps + 1, visited.Add(x))).Max();
    }

    IEnumerable<Point> Dests(string[] map, Point p)
    {
        List<Point> dests = new List<Point>();

        switch (map[p.row][p.col])
        {
            case '>':
                dests.Add(new Point(p.row, p.col + 1));
                break;
            case 'v':
                dests.Add(new Point(p.row + 1, p.col));
                break;
            case '<':
                dests.Add(new Point(p.row, p.col - 1));
                break;
            case '^':
                dests.Add(new Point(p.row - 1, p.col));
                break;
            default:
                if (Valid(map, p.row, p.col + 1, 'E'))
                    dests.Add(new Point(p.row, p.col + 1));
                if (Valid(map, p.row + 1, p.col, 'S'))
                    dests.Add(new Point(p.row + 1, p.col));
                if (Valid(map, p.row, p.col - 1, 'W'))
                    dests.Add(new Point(p.row, p.col - 1));
                if (Valid(map, p.row - 1, p.col, 'N'))
                    dests.Add(new Point(p.row - 1, p.col));
                break;
        }

        return dests;
    }

    //Checks if a given location is within bounds, not #, and not uphill
    bool Valid(string[] map, int row, int col, char dir)
    {
        if (row < 0 || col < 0 || row >= map.Length || col >= map[0].Length)
            return false;

        switch (map[row][col])
        {
            case '#':
                return false;
            case '.':
                return true;
            case '>':
                return dir == 'E';
            case 'v':
                return dir == 'S';
            case '<':
                return dir == 'W';
            case '^':
                return dir == 'N';
            default:
                return false;
        }
    }
}
