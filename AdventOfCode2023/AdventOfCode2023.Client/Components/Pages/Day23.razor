@page "/Day23"
@rendermode InteractiveWebAssembly
@using System.Collections.Immutable

<PageTitle>Day 23</PageTitle>

@* <style>
    body {
        background-image: url(/media/background22.gif);
        color: white;
    }
</style> *@

<h2>Day 23</h2>

<div style="display:table-cell">
    <textarea cols="141" rows="25" @bind="puzzleInput" />
    <div align="right"><button @onclick="Run">Run</button></div>
</div>

<hr />
<h3>Part 1:</h3>
<p>@output1</p>

<hr />
<h3>Part 2:</h3>
<p>@output2</p>

<hr />
<h3>Notes</h3>
<p>Interesting problem, and according to <a href="https://en.wikipedia.org/wiki/Longest_path_problem">Wikipedia</a> it's NP-complete. It can be solved with a depth-first search, but only for small inputs.</p>
<p>My original solution worked directly from the puzzle input, basically treating it as a graph where every . is a node and every edge length is 1. This solves part 1 in seconds, and part 2 of the sample input even faster.</p>
<p>It was, however, too slow for part 2. I decided to speed it up by building a smaller graph where the only nodes are the start, end, and any points where multiple paths intersect. The edge length is the number of steps between each node. This takes about 30 seconds to solve my full input when I run it as a command line app, but might still be too much for WebAssembly.</p>

@code
{
    int output1 = 0;
    int output2 = 0;
    string puzzleInput = "";

    record Point(int row, int col);

    Dictionary<Point, Dictionary<Point, int>> graph = new Dictionary<Point, Dictionary<Point, int>>();

    //Variation on pathfinding. Find the longest route from start to end (without visiting the same location twice)
    //Question: Is it possible to represent my input as a DAG, or is it more complicated than that?
    //Based on some visualizations I saw on the subreddit, it's not a DAG.

    void Run()
    {
        string[] lines = puzzleInput.Trim().Split('\n');
        Point start = new Point(0, 1);

        output1 = LongestPath(lines, start, 0, ImmutableHashSet.Create(start));

        for (int i = 0; i < lines.Length; i++)
            lines[i] = lines[i].Replace('>', '.').Replace('v', '.').Replace('<', '.').Replace('^', '.');

        //The maze is too big to solve part 2 directly. Need to generate a simplified graph.
        //First find all the nodes. These are the start, end, and any path intersections.
        graph.Clear();
        graph[start] = new Dictionary<Point, int>();
        for (int row = 0; row < lines.Length; row++)
        {
            for (int col = 0; col < lines[0].Length; col++)
            {
                if (lines[row][col] == '.' && Dests(lines, new Point(row, col)).Count() > 2)
                    graph[new Point(row, col)] = new Dictionary<Point, int>();
            }
        }
        for(int col=0;col<lines[0].Length;col++)
        {
            if (lines[lines.Length - 1][col] == '.')
                graph[new Point(lines.Length - 1, col)] = new Dictionary<Point, int>();
        }

        //Now add edges and lengths
        foreach(Point p in graph.Keys)
        {
            ConnectNodes(lines, p, p, 0, ImmutableHashSet.Create(p));
        }

        output2 = LongestPath2(lines, start, 0, ImmutableHashSet.Create(start));
    }

    //Depth first search using ImmutableHashSet to track visited points
    int LongestPath(string[] map, Point from, int steps, ImmutableHashSet<Point> visited)
    {
        //We have arrived at our destination
        if (from.row == map.Length - 1)
            return steps;

        IEnumerable<Point> dests = Dests(map, from).Where(x => !visited.Contains(x));
        if (dests.Count() == 0)
            return 0;
        if (dests.Count() == 1)
            return LongestPath(map, dests.First(), steps + 1, visited.Add(dests.First()));
        return dests.Select(x => LongestPath(map, x, steps + 1, visited.Add(x))).Max();
    }

    //This is the same algorithm as LongestPath, just using the graph instead of working directly from the puzzle input
    //The only other change I made was to replace the LINQ from the last line with a loop to try and improve performance
    int LongestPath2(string[] map, Point from, int steps, ImmutableHashSet<Point> visited)
    {
        //We have arrived at our destination
        if (from.row == map.Length - 1)
            return steps;

        IEnumerable<Point> dests = graph[from].Keys.Where(x => !visited.Contains(x));
        if (dests.Count() == 0)
            return 0;
        if (dests.Count() == 1)
            return LongestPath2(map, dests.First(), steps + graph[from][dests.First()], visited.Add(dests.First()));

        int pathLen = 0;
        int maxLen = 0;
        foreach(Point p in dests)
        {
            pathLen = LongestPath2(map, p, steps + graph[from][p], visited.Add(p));
            maxLen = Math.Max(maxLen, pathLen);
        }
        return maxLen;
    }

    IEnumerable<Point> Dests(string[] map, Point p)
    {
        List<Point> dests = new List<Point>();

        switch (map[p.row][p.col])
        {
            case '>':
                dests.Add(new Point(p.row, p.col + 1));
                break;
            case 'v':
                dests.Add(new Point(p.row + 1, p.col));
                break;
            case '<':
                dests.Add(new Point(p.row, p.col - 1));
                break;
            case '^':
                dests.Add(new Point(p.row - 1, p.col));
                break;
            default:
                if (Valid(map, p.row, p.col + 1, 'E'))
                    dests.Add(new Point(p.row, p.col + 1));
                if (Valid(map, p.row + 1, p.col, 'S'))
                    dests.Add(new Point(p.row + 1, p.col));
                if (Valid(map, p.row, p.col - 1, 'W'))
                    dests.Add(new Point(p.row, p.col - 1));
                if (Valid(map, p.row - 1, p.col, 'N'))
                    dests.Add(new Point(p.row - 1, p.col));
                break;
        }

        return dests;
    }

    //Checks if a given location is within bounds, not #, and not uphill
    bool Valid(string[] map, int row, int col, char dir)
    {
        if (row < 0 || col < 0 || row >= map.Length || col >= map[0].Length)
            return false;

        switch (map[row][col])
        {
            case '#':
                return false;
            case '.':
                return true;
            case '>':
                return dir == 'E';
            case 'v':
                return dir == 'S';
            case '<':
                return dir == 'W';
            case '^':
                return dir == 'N';
            default:
                return false;
        }
    }

    void ConnectNodes(string[] map, Point startNode, Point from, int steps, ImmutableHashSet<Point> visited)
    {
        IEnumerable<Point> dests = Dests(map, from).Where(x => !visited.Contains(x));

        if (dests.Count() == 0)
            return;
        else if(steps==0)
        {
            foreach(Point d in dests)
            {
                ConnectNodes(map, startNode, d, 1, visited.Add(d));
            }
        }
        else if (dests.Count() == 1)
        {
            ConnectNodes(map, startNode, dests.First(), steps + 1, visited.Add(dests.First()));
        }
        else
        {
            graph[startNode][from] = steps;
            graph[from][startNode] = steps;
        }
    }
}
