@page "/Day25"
@rendermode InteractiveWebAssembly
@using QuikGraph;

<PageTitle>Day 25</PageTitle>

@* <style>
    body {
        background-image: url(/media/background24.jpg);
    }
</style> *@

<h2>Day 25</h2>

<div style="display:table-cell">
    <textarea cols="80" rows="25" @bind="puzzleInput" />
    <div align="right"><button @onclick="Run">Run</button></div>
</div>

<hr />
<h3>Part 1:</h3>
<p>@outputStr</p>
<p>@output1</p>

<hr />
<h3>Notes</h3>

@code
{
    int output1 = 0;
    string puzzleInput = "";
    string outputStr = "";

    UndirectedGraph<string, TaggedUndirectedEdge<string, double>> graph = new UndirectedGraph<string, TaggedUndirectedEdge<string, double>>();

    void Run()
    {
        graph.Clear();
        string[] lines = puzzleInput.Trim().Split('\n');

        string[] nodes;
        string minNode, maxNode;
        foreach (string line in lines)
        {
            nodes = line.Replace(":", "").Split(" ");
            if (!graph.ContainsVertex(nodes[0]))
                graph.AddVertex(nodes[0]);
            for (int i = 1; i < nodes.Length; i++)
            {
                if (!graph.ContainsVertex(nodes[i]))
                    graph.AddVertex(nodes[i]);
                if(nodes[0].CompareTo(nodes[i])<0)
                {
                    minNode = nodes[0];
                    maxNode = nodes[i];
                }
                else
                {
                    minNode = nodes[i];
                    maxNode = nodes[0];
                }

                graph.AddEdge(new TaggedUndirectedEdge<string, double>(minNode, maxNode, 1));
            }
        }

        QuikGraph.Algorithms.GraphPartition.KernighanLinAlgorithm<string, TaggedUndirectedEdge<string, double>> linAlgorithm = new QuikGraph.Algorithms.GraphPartition.KernighanLinAlgorithm<string, TaggedUndirectedEdge<string, double>>(graph, 1);
        linAlgorithm.Compute();

        outputStr = string.Format("Cut cost {0}. Partition sizes are {1} and {2}", linAlgorithm.Partition.CutCost, linAlgorithm.Partition.VertexSetA.Count, linAlgorithm.Partition.VertexSetB.Count);

        output1 = linAlgorithm.Partition.VertexSetA.Count * linAlgorithm.Partition.VertexSetB.Count;
    }
}
