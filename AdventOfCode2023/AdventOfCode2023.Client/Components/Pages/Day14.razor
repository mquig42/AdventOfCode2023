@page "/Day14"
@rendermode InteractiveWebAssembly

<PageTitle>Day 14</PageTitle>

<style>
    body {
        background-image: url(/media/background14.gif);
    }
</style>

<div style="background-color:white; width:fit-content; border-radius:5px; border:2px solid red; padding:15px;">
    <h2 style="margin-top:0px; margin-bottom:0px; color:#4D9F37;">Day 14</h2>
</div>
<br />

<div style="display:table-cell">
    <textarea cols="100" rows="25" @bind="puzzleInput" />
    <div align="right"><button @onclick="Run">Run</button></div>
</div>

<div style="float:left; background-color:white; width:fit-content; border-radius:5px; border:2px solid red; padding:15px;">
    <h3 style="margin-top:0px">Part 1:</h3>@output1
</div>
<div style="float:left; width:20px;"><p></p></div>
<div style="float:left; background-color:white; width:fit-content; border-radius:5px; border:2px solid red; padding:15px;">
    <h3 style="margin-top:0px">Part 2:</h3>@output2
</div>
<p style="clear: both;"></p>
<br />

<div style="background-color:white; width:75%; border-radius:5px; border:2px solid red; padding:15px;">
<h3 style="margin-top:0px">Notes</h3>
This was fun. I used a similar approach to last year's <a href="https://adventofcode.com/2022/day/17">volcano tetris</a> puzzle. Write a simulation and run it for a limited number of steps, then examine the data it produced and figure out how to extrapolate from there.
</div>

@code
{
    int output1 = 0;
    int output2 = 0;
    string puzzleInput = "";

    HashSet<int> square = new HashSet<int>();
    HashSet<int> round = new HashSet<int>();
    int extent = 0;

    //My puzzle input is a 100x100 grid containing 2054 round rocks and 1601 square rocks
    //The platform can be tilted in 4 directions. Round rocks roll as far as they can before encountering an obstacle
    //square rocks do not move, and can be represented as a HashSet. In fact, round rocks can be another HashSet.
    //All rocks are just integers, representing row and column. For example, row 47 column 12 is 47012
    //Directions are also integers. North is -1000, South is 1000, West is -1, East is 1

    //Update: solution works for part 1. Part 2 is a similar question, but much bigger.
    //Instead of tilting the platform once, tilt it 4 billion times.

    //Update: Solved part 2 manually. The load values eventually fall into a short repeating pattern.
    //Need to automate finding this cycle and then do a bit of math to figure out where n=10^9 fits into it.

    void Run()
    {
        string[] grid = puzzleInput.Trim().Split("\n");
        extent = grid.Length;
        square.Clear();
        round.Clear();

        //Add wall of square rocks to the left and right edges of the grid
        for (int i = 0; i < grid.Length; i++)
        {
            grid[i] = "#" + grid[i] + "#";
        }

        for (int row = 0; row < grid.Length; row++)
        {
            for (int col = 0; col < grid[0].Length; col++)
            {
                if (grid[row][col] == '#')
                    square.Add(row * 1000 + col);
                if (grid[row][col] == 'O')
                    round.Add(row * 1000 + col);
            }
        }

        Tilt(-1000);
        output1 = Load();

        //Basing this on the pattern my input produced. Not sure how general it is.
        //1. Find the lowest Load value and record its position
        //2. Find the highest value that occurs after that position
        //3. Find the next position where that high value occurs
        //4. Math

        int currentLoad = Load();
        int lo = currentLoad;
        int loPos = 0;
        List<int> loadHistory = new List<int>();
        loadHistory.Add(currentLoad);

        for (int i = 1; i < 250; i++)
        {
            Cycle();
            currentLoad = Load();
            if (currentLoad < lo)
            {
                lo = currentLoad;
                loPos = i;
            }
            loadHistory.Add(currentLoad);
        }

        int hi = 0;
        int hiPos = 0;
        for (int i = loPos; i < loadHistory.Count; i++)
        {
            if (loadHistory[i] > hi)
            {
                hi = loadHistory[i];
                hiPos = i;
            }
            else
                break;
        }

        int hi2Pos = 0;
        for (int i = hiPos + 1; i < loadHistory.Count; i++)
        {
            if (loadHistory[i] == hi)
            {
                hi2Pos = i;
                break;
            }
        }

        int period = hi2Pos - hiPos;
        output2 = loadHistory[(1000000000 - hiPos) % period + hiPos];
    }

    //Move all round rocks in specified direction.
    void Tilt(int dir)
    {
        int rMoved;
        HashSet<int> moved = new HashSet<int>();
        moved.UnionWith(square);

        foreach(int r in round)
        {
            rMoved = r;
            while (!moved.Contains(rMoved) && rMoved > 0 && rMoved < extent * 1000)
                rMoved += dir;
            while (moved.Contains(rMoved) || rMoved < 0 || rMoved > extent * 1000)
                rMoved -= dir;
            moved.Add(rMoved);
        }

        moved.ExceptWith(square);
        round = moved;
    }

    //Calculate the structural load of all round rocks
    int Load()
    {
        int sum = 0;
        foreach(int r in round)
        {
            sum += extent - r / 1000;
        }

        return sum;
    }

    //Tilt North, West, South, East
    void Cycle()
    {
        Tilt(-1000);
        Tilt(-1);
        Tilt(1000);
        Tilt(1);
    }

    //Plot the position of every round and square rock in the TextArea at the top of the page
    //Only used for debugging the Tilt function
    void PrintGrid(int width)
    {
        puzzleInput += '\n';

        for (int row = 0; row < extent; row++)
        {
            for (int col = 1; col < width - 1; col++)
            {
                if (round.Contains(row * 1000 + col))
                    puzzleInput += 'O';
                else if (square.Contains(row * 1000 + col))
                    puzzleInput += '#';
                else
                    puzzleInput += '.';
            }
            puzzleInput += '\n';
        }
    }
}
