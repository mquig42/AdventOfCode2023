@page "/Day06"
@rendermode InteractiveWebAssembly
@using System.Text.RegularExpressions;

<style>
    body {
        background-image: url(/media/background-water1.jpg);
    }
</style>

<PageTitle>Day 6</PageTitle>

<h2>Day 6</h2>

<textarea cols="80" rows="25" @bind="puzzleInput" />

<hr />
<div>
    <h3>Part 1:</h3>
    <img src="/media/boat.gif" style="float:left" />
</div>
<button @onclick="Run1">Run</button>
<p>@output1</p>

<hr />
<div>
    <h3>Part 2:</h3>
    <img src="/media/boat.gif" style="float:left" />
</div>
<button @onclick="Run2">Run</button>
<p>@output2</p>

<hr />
<h3>Notes</h3>
<p>Easy one this time. In fact, part 2 was simpler than part 1, since I don't need to loop through multiple races. Will probably return to replace my initial brute-force solution with something more efficient, and possibly even simpler.</p>
<p>Update: I did come back and write a constant-time solution, and it ended up being 16 lines shorter.</p>

@code
{
    long output1 = 0;
    long output2 = 0;
    string puzzleInput = "";

    long CountWins(long time, long record)
    {
        //Boat distance is a quadratic equation. Use quadratic formula to solve it. In this case, a is always 1 and can be ignored.
        double a = (time + Math.Sqrt(time * time - 4 * record)) / 2;
        double b = (time - Math.Sqrt(time * time - 4 * record)) / 2;

        //We need to beat the record, not just match it. Use integerOffset to discard any integer solutions we find
        int integerOffset = 0;
        if (a == Math.Floor(a))
            integerOffset++;
        if (b == Math.Floor(b))
            integerOffset++;

        //Return difference between a and b, accounting for integer offsets
        return (long)(Math.Floor(double.Max(a, b)) - Math.Ceiling(double.Min(a, b))) + 1 - integerOffset;
    }

    void Run1()
    {
        string[] lines = puzzleInput.Split("\n");
        MatchCollection timesMatches = Regex.Matches(lines[0], @"\d+");
        MatchCollection recordsMatches = Regex.Matches(lines[1], @"\d+");

        long product = 1;
        for (int i = 0; i < timesMatches.Count; i++)
        {
            product *= CountWins(long.Parse(timesMatches[i].Value), long.Parse(recordsMatches[i].Value));
        }

        output1 = product;
    }

    void Run2()
    {
        string[] lines = puzzleInput.Split("\n");

        long time = long.Parse(lines[0].Replace(" ", "").Split(":")[1]);
        long dist = long.Parse(lines[1].Replace(" ", "").Split(":")[1]);

        output2 = CountWins(time, dist);
    }
}
