@page "/Day12"
@rendermode InteractiveWebAssembly
@using System.Text.RegularExpressions;

<PageTitle>Day 12</PageTitle>

<style>
    body {
        background-image: url(/media/background12.jpg);
        color: white;
    }
</style>

<h3>Day 12</h3>

<div style="display:table-cell">
    <textarea cols="80" rows="25" @bind="puzzleInput" />
    <div align="right"><button @onclick="Run">Run</button></div>
</div>

<hr />
<h3>Part 1:</h3>
<p>@output1</p>

<hr />
<h3>Part 2:</h3>
<p>@output2</p>

<hr />
<h3>Notes</h3>
<p>How long has he been waiting to use that hot springs / onsen joke?</p>
<p>I originally solved this with recursion, but the approach wasn't amenable to memoization. I had to write a new recursive function that throws away any full groups at the beginning of the string. That works well enough as a command line application, solving my input in about 40 seconds while using several GB of memory for the memoization cache. It runs much slower in WebAssembly.</p>

@code
{
    long output1 = 0;
    long output2 = 0;
    string puzzleInput = "";

    //Recursive cache
    Dictionary<string, long> memo = new Dictionary<string, long>();

    void Run()
    {
        memo.Clear();
        output1 = puzzleInput.Trim().Split("\n").Select(x => CountSolutions(x)).Aggregate((a, b) => a + b);
        output2 = puzzleInput.Trim().Split("\n").Select(x => CountSolutions(Unfold(x))).Aggregate((a, b) => a + b);
    }

    //Recursion + memoization. Solves part 2 of my input in about 40s as a command line app. Performance as wasm is lower.
    long CountSolutions(string line)
    {
        if (memo.ContainsKey(line))
            return memo[line];

        string springs = line.Split()[0];
        int[] counts = line.Split()[1].Split(',').Select(x => int.Parse(x)).ToArray();

        //Group counter relies on groups ending with .
        if (!springs.EndsWith('.'))
            springs = springs + '.';

        //Check for terminal states
        if(!springs.Contains('?'))
        {
            //Special case: string doesn't contain ? or #, and counts doesn't contain any groups
            if (counts.Length == 1 && counts[0] == 0 && !springs.Contains('#'))
            {
                memo[line] = 1;
                return 1;
            }
            if(Valid(springs, counts))
            {
                memo[line] = 1;
                return 1;
            }
            memo[line] = 0;
            return 0;
        }

        //Check to see if line starts with a complete block of broken springs
        if (Regex.IsMatch(springs, @"^\.*#+\."))
        {
            if(GroupLength(springs) == counts[0])
            {
                //If group length is correct, remove it and continue with the rest of the string
                springs = springs.Substring(springs.IndexOf("#.") + 1);
                counts = counts.TakeLast(counts.Length - 1).ToArray();
            }
            else
            {
                //First group is the wrong length. No valid solutions will be found
                memo[line] = 0;
                return 0;
            }
        }

        string before = springs.Substring(0, springs.IndexOf('?'));
        string after = springs.Substring(springs.IndexOf('?') + 1);
        string countsStr = "";
        foreach (int i in counts)
            countsStr = countsStr + i.ToString() + ",";
        countsStr = countsStr.Trim(',');
        if (countsStr == "")
            countsStr = "0";

        long r = CountSolutions(before + '.' + after + " " + countsStr) + CountSolutions(before + '#' + after + " " + countsStr);
        memo[line] = r;
        return r;
    }

    int GroupLength(string line)
    {
        int count = 0;
        foreach(char c in line)
        {
            if (c == '#')
                count++;
            else if (c == '.' && count > 0)
                break;
        }
        return count;
    }

    bool Valid(string s, int[] counts)
    {
        int c = 0;
        int group = 0;
        char last = '.';

        try
        {
            foreach (char spring in s)
            {
                if (spring == '.' && last == '#')
                {
                    if (c != counts[group])
                        return false;
                    c = 0;
                    last = spring;
                    group++;
                }
                else if (spring == '#')
                {
                    c++;
                    last = spring;
                }
            }

            return group == counts.Length;
        }
        catch
        {
            return false;
        }
    }

    string Unfold(string line)
    {
        string springs = line.Split()[0];
        string counts = line.Split()[1];

        return string.Format("{0}?{0}?{0}?{0}?{0} {1},{1},{1},{1},{1}", springs, counts);
    }
}
