@page "/Day05"
@rendermode InteractiveWebAssembly

@* <style>
    body {
        background-image: url(/media/confetti.gif);
    }
</style> *@

<PageTitle>Day 5</PageTitle>

<h2>Day 5</h2>

<textarea cols="80" rows="25" @bind="puzzleInput" />

<hr />
<h3>Part 1:</h3>
<button @onclick="Run1">Run</button>
<p>@output1</p>

<hr />
<h3>Part 2:</h3>
<button @onclick="Run2">Run</button>
<p>@output2</p>

<hr />
<h3>Notes</h3>
<p>My first solution for part 2, running all the mappings backwards so I could test if a location number corresponded to a seed, was too slow. When I ran it as a console app, it completed in 13 minutes and found the correct answer. WebAssembly doesn't seem to like functions that take 13 minutes to run, though.</p>

@code
{
    long output1 = 0;
    string output2 = "";
    string puzzleInput = "";

    IEnumerable<long> seeds = new List<long>();
    List<long[]> seedSoil = new List<long[]>();
    List<long[]> soilFertilizer = new List<long[]>();
    List<long[]> fertilizerWater = new List<long[]>();
    List<long[]> waterLight = new List<long[]>();
    List<long[]> lightTemperature = new List<long[]>();
    List<long[]> temperatureHumidity = new List<long[]>();
    List<long[]> humidityLocation = new List<long[]>();

    void ParseInput()
    {
        //No trim this time, we need an empty line at the end
        string[] lines = puzzleInput.Split("\n");

        seeds = lines[0].Substring(lines[0].IndexOf(":") + 2).Split().Select(x => long.Parse(x));

        //Start at 2. First line is seeds, second is blank
        int lineNo = 2;
        lineNo = ParseMap(lines, lineNo, seedSoil);
        lineNo = ParseMap(lines, lineNo, soilFertilizer);
        lineNo = ParseMap(lines, lineNo, fertilizerWater);
        lineNo = ParseMap(lines, lineNo, waterLight);
        lineNo = ParseMap(lines, lineNo, lightTemperature);
        lineNo = ParseMap(lines, lineNo, temperatureHumidity);
        lineNo = ParseMap(lines, lineNo, humidityLocation);
    }

    /// <summary>
    /// Reads a map section from the puzzle input
    /// </summary>
    /// <param name="lines">Puzzle input as an array of strings, one per line</param>
    /// <param name="start">Starting line number of map section</param>
    /// <param name="map">Destination map</param>
    /// <returns>Starting line number of the next map section in puzzle input</returns>
    int ParseMap(string[] lines, int start, List<long[]> map)
    {
        int i;
        for(i = start + 1; lines[i] != ""; i++)
        {
            long[] mapLine = new long[3];
            mapLine[0] = long.Parse(lines[i].Split()[0]);
            mapLine[1] = long.Parse(lines[i].Split()[1]);
            mapLine[2] = long.Parse(lines[i].Split()[2]);
            map.Add(mapLine);
        }

        return i + 1;
    }

    //Finds the corresponding destination value for source, as defined by map
    //The map is an array of three numbers.
    //0: destination
    //1. source
    //2. length
    long ApplyMap(long source, List<long[]> map)
    {
        foreach(long[] mapRange in map)
        {
            if (source >= mapRange[1] && source - mapRange[1] <= mapRange[2])
                return mapRange[0] + (source - mapRange[1]);
        }
        return source;
    }

    //Applies all mappings. When given a seed number, returns location
    long ApplyAllMaps(long source)
    {
        return ApplyMap(ApplyMap(ApplyMap(ApplyMap(ApplyMap(ApplyMap(ApplyMap(source, seedSoil), soilFertilizer), fertilizerWater), waterLight), lightTemperature), temperatureHumidity), humidityLocation);
    }

    //Applies a map to an entire range of values. Returns a list of destination ranges
    //This list will always have an even number of elements, and alternates between start and end
    List<long> MapRange(long start, long end, List<long[]> map)
    {
        List<long> ranges = new List<long>();
        long overlapStart, overlapEnd;

        foreach(long[] range in map)
        {
            overlapStart = long.Max(start, range[1]);
            overlapEnd = long.Min(end, range[1] + range[2]);
            if(overlapStart < overlapEnd)
            {
                ranges.Add(overlapStart - range[1] + range[0]);
                ranges.Add(overlapEnd - range[1] + range[0]);
            }
        }

        //Need to account for unmapped ranges. Any source values not part of a map range map to themselves.
        //There may end up being several of these depending on how the ranges of the map are arranged.

        return ranges;
    }

    void Run1()
    {
        ParseInput();
        output1 = seeds.Select(x => ApplyAllMaps(x)).Min();
    }

    void Run2()
    {
        //ParseInput();

        //MapRange(79, 79 + 14, seedSoil);
        output2 = "Not implemented.";
    }
}
