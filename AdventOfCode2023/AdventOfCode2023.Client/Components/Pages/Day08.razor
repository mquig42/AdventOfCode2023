@page "/Day08"
@rendermode InteractiveWebAssembly
@using System.Text.RegularExpressions

<PageTitle>Day 8</PageTitle>

<style>
    body {
        background-image: url(/media/tree-running.gif);
        color: #003366;
    }
</style>

<h3>Day 8</h3>

<div style="display:table-cell">
    <textarea cols="80" rows="25" @bind="puzzleInput" />
    <div align="right"><button @onclick="Run">Run</button></div>
</div>

<hr />
<h3>Part 1:</h3>
<p>@output1</p>

<hr />
<h3>Part 2:</h3>
<p>@output2</p>

<hr />
<h3>Notes</h3>
<p>This reminds me of the bus station puzzle from 2020. Least common multiple is a recurring topic in Advent of Code.</p>
<p>After solving part 1 and investing the patterns that come up in the data for part 2, I originally got the solution from Wolfram Alpha. Afterwards, I wrote my own LCM calculation.</p>

@code
{
    long output1 = 0;
    long output2 = 0;
    string puzzleInput = "";

    string directions = "";
    Dictionary<string, string[]> nodes = new Dictionary<string, string[]>();

    void Run()
    {
        //Parse input
        string[] lines = puzzleInput.Trim().Split("\n");
        directions = lines[0];
        nodes.Clear();

        for (int i = 2; i < lines.Count(); i++)
        {
            MatchCollection mc = Regex.Matches(lines[i], @"[A-Z]{3}");
            nodes[mc.ElementAt(0).Value] = [mc.ElementAt(1).Value, mc.ElementAt(2).Value];
        }

        output1 = StepsToDest("AAA");
        //This LINQ maps StepsToDest over every node that ends with A. The puzzle answer is the least common multiple of those values.
        output2 = LCM(nodes.Keys.Where(x => x.EndsWith('A')).Select(x => StepsToDest(x)));
    }

    //Find number of steps from given start node to any node that ends with Z
    long StepsToDest(string start)
    {
        long steps = 0;
        int d = 0;
        string loc = start;

        //This works for part 1 as well, since the only node it passes through that ends with Z is ZZZ
        while (!loc.EndsWith('Z'))
        {
            if (directions[d] == 'L')
                loc = nodes[loc][0];
            else
                loc = nodes[loc][1];

            steps++;
            d = (d + 1) % directions.Length;
        }

        return steps;
    }

    //Least common multiple function based on Euclid's algorithm for greatest common divisors. The Aggregate function in C# is similar to foldl in Racket
    long LCM(IEnumerable<long> factors)
    {
        return factors.Aggregate((a, b) => a * (b / GCD(a, b)));
    }

    //Euclid's algorithm
    long GCD(long a, long b)
    {
        long t;

        while (b != 0)
        {
            t = b;
            b = a % b;
            a = t;
        }

        return a;
    }

    //Not used in final program. Something I wrote to explore the data
    //Keep following instructions until you've reached a Z node 5 times, and generate a list of step counts for each time
    //Wanted to see if it was periodic, and it was.
    List<long> Try()
    {
        List<long> stepsLst = new List<long>();
        long steps = 0;
        int d = 0;
        string loc = nodes.Keys.Where(x => x.EndsWith('A')).ToArray()[0];

        while (stepsLst.Count < 5)
        {
            if (directions[d] == 'L')
                loc = nodes[loc][0];
            else
                loc = nodes[loc][1];

            steps++;
            d = (d + 1) % directions.Length;
            if (loc.EndsWith('Z'))
                stepsLst.Add(steps);
        }

        return stepsLst;
    }
}
