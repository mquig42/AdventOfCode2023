@page "/Day16"
@rendermode InteractiveWebAssembly

<PageTitle>Day 16</PageTitle>

<style>
    body {
        background-image: url(/media/background16.png);
        color: darkblue;
    }
</style>

<h2>Day 16</h2>

<div style="display:table-cell">
    <textarea cols="110" rows="25" @bind="puzzleInput" />
    <div align="right"><button @onclick="Run">Run</button></div>
</div>

<hr />
<h3>Part 1:</h3>
<p>@output1</p>

<hr />
<h3>Part 2:</h3>
<p>@output2</p>

<hr />
<h3>Notes</h3>
<p>My first attempt at solving part 1 used a single <code>HashSet</code> to track visited tiles, and traced each beam until it went out of bounds. When I tried it on the sample input, I got an infinite loop. Turns out not every beam goes off the edge of the grid. I had to use 4 <code>HashSet</code>s, one for each direction.</p>

<script src="https://cdn.jsdelivr.net/combine/npm/tone@14.7.58,npm/@@magenta/music@1.23.1/es6/core.js,npm/focus-visible@5,npm/html-midi-player@1.5.0"></script>
<midi-player src="/media/hollyjol.mid" autoplay>
</midi-player>

@code
{
    int output1 = 0;
    int output2 = 0;
    string puzzleInput = "";

    string[] grid = [];
    HashSet<int> eRight = new HashSet<int>();
    HashSet<int> eDown = new HashSet<int>();
    HashSet<int> eLeft = new HashSet<int>();
    HashSet<int> eUp = new HashSet<int>();

    //Integer coordinate system. Position is a single value, row * 1000 + col. I have defined constants for the directions.
    const int RIGHT = 1;
    const int DOWN = 1000;
    const int LEFT = -1;
    const int UP = -1000;

    void Run()
    {
        grid = puzzleInput.Trim().Split('\n');

        output1 = Energize(0, RIGHT);

        int topMax = EdgeMax(0, 1, DOWN);
        int leftMax = EdgeMax(0, 1000, RIGHT);
        int bottomMax = EdgeMax((grid.Length - 1) * 1000, 1, UP);
        int rightMax = EdgeMax(grid[0].Length - 1, 1000, LEFT);

        output2 = Math.Max(topMax, Math.Max(leftMax, Math.Max(bottomMax, rightMax)));
    }

    //Tries starting a beam on each point along an edge of the grid. Returns maximum value
    int EdgeMax(int startPos, int increment, int dir)
    {
        int m = 0;
        int e;

        for (int i = startPos; i >= 0 && i < grid.Length * 1000 && i % 1000 < grid[0].Length; i += increment)
        {
            e = Energize(i, dir);
            m = Math.Max(e, m);
        }

        return m;
    }

    //Returns number of tiles energized by a beam with given starting position and direction
    int Energize(int startPos, int dir)
    {
        eRight.Clear();
        eDown.Clear();
        eLeft.Clear();
        eUp.Clear();

        Beam(startPos, dir);

        eRight.UnionWith(eDown);
        eRight.UnionWith(eLeft);
        eRight.UnionWith(eUp);
        return eRight.Count;
    }

    void Beam(int pos, int dir)
    {
        //Out of bounds detection
        if (pos < 0 || pos / 1000 >= grid.Length || pos % 1000 >= grid[0].Length)
            return;

        //Have we been in this position and direction before? If so stop. Prevents infinite loops.
        if (dir == RIGHT)
        {
            if (eRight.Contains(pos))
                return;
            eRight.Add(pos);
        }
        else if (dir == DOWN)
        {
            if (eDown.Contains(pos))
                return;
            eDown.Add(pos);
        }
        else if (dir == LEFT)
        {
            if (eLeft.Contains(pos))
                return;
            eLeft.Add(pos);
        }
        else if (dir == UP)
        {
            if (eUp.Contains(pos))
                return;
            eUp.Add(pos);
        }

        //Move to next tile
        switch (grid[pos / 1000][pos % 1000])
        {
            case '\\':
                if (dir == RIGHT)
                    Beam(pos + DOWN, DOWN);
                else if (dir == DOWN)
                    Beam(pos + RIGHT, RIGHT);
                else if (dir == LEFT)
                    Beam(pos + UP, UP);
                else if (dir == UP)
                    Beam(pos + LEFT, LEFT);
                break;
            case '/':
                if (dir == RIGHT)
                    Beam(pos + UP, UP);
                else if (dir == DOWN)
                    Beam(pos + LEFT, LEFT);
                else if (dir == LEFT)
                    Beam(pos + DOWN, DOWN);
                else if (dir == UP)
                    Beam(pos + RIGHT, RIGHT);
                break;
            case '-':
                if (dir == LEFT || dir == RIGHT)
                    Beam(pos + dir, dir);
                else if (dir == DOWN || dir == UP)
                {
                    Beam(pos + LEFT, LEFT);
                    Beam(pos + RIGHT, RIGHT);
                }
                break;
            case '|':
                if (dir == LEFT || dir == RIGHT)
                {
                    Beam(pos + DOWN, DOWN);
                    Beam(pos + UP, UP);
                }
                else if (dir == UP || dir == DOWN)
                    Beam(pos + dir, dir);
                break;
            default:
                Beam(pos + dir, dir);
                break;
        }
    }
}
