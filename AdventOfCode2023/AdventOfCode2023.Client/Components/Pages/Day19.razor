@page "/Day19"
@rendermode InteractiveWebAssembly
@using System.Text.RegularExpressions;

<PageTitle>Day 19</PageTitle>

@* <style>
    body {
        background-image: url(/media/background18.gif);
    }
</style> *@

<h2>Day 19</h2>

<div style="display:table-cell">
    <textarea cols="80" rows="25" @bind="puzzleInput" />
    <div align="right"><button @onclick="Run">Run</button></div>
</div>

<hr />
<h3>Part 1:</h3>
<p>@output1</p>

<hr />
<h3>Part 2:</h3>
<p>@output2</p>

<hr />
<h3>Notes</h3>

@code
{
    int output1 = 0;
    long output2 = 0;
    string puzzleInput = "";

    record Range(int start, int end);

    List<Dictionary<char, int>> parts = new List<Dictionary<char, int>>();
    Dictionary<string, string[]> workflows = new Dictionary<string, string[]>();

    void Run()
    {
        parts.Clear();
        workflows.Clear();
        string[] lines = puzzleInput.Split('\n');
        int i = 0;

        //Parsing
        while(lines[i]!="")
        {
            //Read workflows. The first regex matches the group of letters at the beginning of the line, the second matches everything between { and }
            workflows[Regex.Match(lines[i], @"^\w+").Value] = Regex.Match(lines[i], @"(?<={).*(?=})").Value.Split(',');
            i++;
        }
        i++;
        while (lines[i] != "")
        {
            //Read parts
            parts.Add(ReadPart(lines[i]));
            i++;
        }

        //Part 1
        output1 = parts.Where(x => Validate(x, "in")).Select(SumPart).Sum();

        //Part 2
        Range[] space = [new Range(1, 4000), new Range(1, 4000), new Range(1, 4000), new Range(1, 4000)];
        output2 = AcceptedVolume(space, "in");
    }

    //Each Part is represented by a dictionary with 4 keys. Parse a line of input and create one of these dictionaries
    Dictionary<char, int> ReadPart(string line)
    {
        Dictionary<char, int> part = new Dictionary<char, int>();
        int[] values = Regex.Matches(line, @"\d+").Select(x => int.Parse(x.Value)).ToArray();
        part['x'] = values[0];
        part['m'] = values[1];
        part['a'] = values[2];
        part['s'] = values[3];
        return part;
    }

    //=====Part 1 Functions=====

    //Validates a part using the given workflow. Will recurse to other workflows if required.
    bool Validate(Dictionary<char, int> part, string workflowName)
    {
        string ruleResult;

        foreach(string rule in workflows[workflowName])
        {
            ruleResult = ProcessRule(part, rule);

            if (ruleResult == "A")
                return true;
            else if (ruleResult == "R")
                return false;
            else if (ruleResult != "")
                return Validate(part, ruleResult);
        }
        return false;
    }

    //Return the result of processing a single rule on part. This result could be A, R, or the name of a workflow
    //If the rule contains a condition which is not true for the given part, returns an empty string. This instructs Validate to move on to the next rule in the workflow.
    string ProcessRule(Dictionary<char, int> part, string rule)
    {
        if (rule.Contains('<'))
        {
            if (part[rule[0]] < int.Parse(rule.Split(':')[0].Substring(2)))
                return rule.Split(':')[1];
            return "";
        }
        else if (rule.Contains('>'))
        {
            if (part[rule[0]] > int.Parse(rule.Split(':')[0].Substring(2)))
                return rule.Split(':')[1];
            return "";
        }
        else
            return rule;
    }

    int SumPart(Dictionary<char, int> part)
    {
        return part['x'] + part['m'] + part['a'] + part['s'];
    }

    //=====Part 2 Functions=====

    //Returns the total volume that will be accepted by the given workflow
    //The algorithm is based on recursively dividing space, so start it with the full range of 1 to 4000 in every dimension and workflowName "in"
    long AcceptedVolume(Range[] space, string workflowName)
    {
        long sum = 0;
        Range[] localSpace = space;
        Range[][] dividedSpace;

        if (workflowName == "A")
            return Volume(space);
        else if (workflowName == "R")
            return 0;
        else
        {
            foreach (string rule in workflows[workflowName])
            {
                if (rule == "A")
                    sum += Volume(localSpace);
                else if (rule.Contains('<') || rule.Contains('>'))
                {
                    dividedSpace = DivideSpace(localSpace, rule);
                    sum += AcceptedVolume(dividedSpace[0], rule.Split(':')[1]);
                    localSpace = dividedSpace[1];
                }
                else if (rule != "R")
                    sum += AcceptedVolume(localSpace, rule);
            }
        }

        return sum;
    }

    //Returns two spaces. The first is the entire space where the condition in rule evaluates to true, the second is the entire space where it is false
    Range[][] DivideSpace(Range[] space, string rule)
    {
        int dimension = Array.IndexOf(['x', 'm', 'a', 's'], rule[0]);
        char comparison = rule[1];
        int value = int.Parse(rule.Split(':')[0].Substring(2));
        Range[] spaceIfTrue = new Range[4];
        Range[] spaceIfFalse = new Range[4];

        //First initialize the two return values equal to space. The appropriate dimension will be modified later.
        for(int i=0;i<4;i++)
        {
            spaceIfTrue[i] = space[i];
            spaceIfFalse[i] = space[i];
        }

        if(comparison=='<')
        {
            spaceIfTrue[dimension] = new Range(space[dimension].start, value - 1);
            spaceIfFalse[dimension] = new Range(value, space[dimension].end);
        }
        else
        {
            spaceIfTrue[dimension] = new Range(value + 1, space[dimension].end);
            spaceIfFalse[dimension] = new Range(space[dimension].start, value);
        }

        return [spaceIfTrue, spaceIfFalse];
    }

    //Calculate the total volume of the given space
    long Volume(Range[] range)
    {
        long v = 1;

        foreach(Range r in range)
        {
            v *= (r.end - r.start + 1);
        }

        return v;
    }
}
