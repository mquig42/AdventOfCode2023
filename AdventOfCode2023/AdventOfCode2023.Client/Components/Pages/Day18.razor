@page "/Day18"
@rendermode InteractiveWebAssembly

<PageTitle>Day 18</PageTitle>

<style>
    body {
        background-color: green;
    }
</style>

<h2>Day 18</h2>

<div style="display:table-cell">
    <textarea cols="80" rows="25" @bind="puzzleInput" />
    <div align="right"><button @onclick="Run">Run</button></div>
</div>

<div style="background-image:url(/media/workshop.gif); background-repeat:repeat-x; height:112px"></div>
<h3>Part 1:</h3>
<p>@output1</p>

<hr />
<h3>Part 2:</h3>
<p>@output2</p>

<hr />
<h3>Notes</h3>
<p>My solution is based on this: <a href="https://www.mathopenref.com/coordpolygonarea2.html">Area of a Polygon</a>. It was mentioned on the subreddit for day 10. I ended up using a different approach there, but came back to it today.</p>

@code
{
    long output1 = 0;
    long output2 = 0;
    string puzzleInput = "";

    void Run()
    {
        string[] lines = puzzleInput.Trim().Split('\n');
        output1 = Solve(lines.Select(Decode1));
        output2 = Solve(lines.Select(Decode2));
    }

    (char dir, int len) Decode1(string line)
    {
        return (line[0], int.Parse(line.Split(" ")[1]));
    }

    (char dir, int len) Decode2(string line)
    {
        string hex = line.Split(" ")[2];
        char d = 'U';

        if (hex[7] == '0')
            d = 'R';
        else if (hex[7] == '1')
            d = 'D';
        else if (hex[7] == '2')
            d = 'L';

        return (d, Convert.ToInt32(hex.Substring(2, 5), 16));
    }

    long Solve(IEnumerable<(char dir, int len)> instructions)
    {
        long area = 0;
        long perimeter = 0;
        (long x, long y) pos = (0, 0);
        (long x, long y) newPos;

        foreach((char dir, int len) instruction in instructions)
        {
            switch (instruction.dir)
            {
                case 'U':
                    newPos = (pos.x, pos.y - instruction.len);
                    break;
                case 'D':
                    newPos = (pos.x, pos.y + instruction.len);
                    break;
                case 'L':
                    newPos = (pos.x - instruction.len, pos.y);
                    break;
                default:
                    newPos = (pos.x + instruction.len, pos.y);
                    break;
            }

            area += (pos.x + newPos.x) * (pos.y - newPos.y);
            perimeter += instruction.len;
            pos = newPos;
        }

        return (Math.Abs(area) + perimeter) / 2 + 1;
    }
}
