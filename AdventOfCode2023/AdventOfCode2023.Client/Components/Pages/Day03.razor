@page "/Day03"
@rendermode InteractiveWebAssembly

<PageTitle>Day 3</PageTitle>

<h2>Day 3</h2>

<textarea cols="80" rows="25" @bind="inpInput" />

<hr />
<h3>Part 1:</h3>
<button @onclick="Run1">Run</button>
<p>@output1</p>

<hr />
<h3>Part 2:</h3>
<button @onclick="Run2">Run</button>
<p>@output2</p>

<hr />
<h3>Notes</h3>
<p>Notes</p>

@code
{
    int output1 = 0;
    int output2 = 0;
    string inpInput = "";

    void Run1()
    {
        //Access this like so: lines[row][col]
        string[] lines = inpInput.Trim().Split("\n");

        List<int> allPartNumbers = new List<int>();

        for(int row=0; row < lines.Length; row++)
        {
            for(int col = 0; col < lines[0].Length; col++)
            {
                if(!char.IsDigit(lines[row][col]) && lines[row][col] != '.')
                {
                    //Symbol found. Check all 8 neighbouring coords for numbers.

                    HashSet<int> partNumbers = new HashSet<int>();
                    if (char.IsDigit(GetChar(lines, row - 1, col - 1)))
                        partNumbers.Add(GetNumber(lines, row - 1, col - 1));
                    if (char.IsDigit(GetChar(lines, row - 1, col)))
                        partNumbers.Add(GetNumber(lines, row - 1, col));
                    if (char.IsDigit(GetChar(lines, row - 1, col + 1)))
                        partNumbers.Add(GetNumber(lines, row - 1, col + 1));
                    if (char.IsDigit(GetChar(lines, row, col - 1)))
                        partNumbers.Add(GetNumber(lines, row, col - 1));
                    if (char.IsDigit(GetChar(lines, row, col + 1)))
                        partNumbers.Add(GetNumber(lines, row, col + 1));
                    if (char.IsDigit(GetChar(lines, row + 1, col - 1)))
                        partNumbers.Add(GetNumber(lines, row + 1, col - 1));
                    if (char.IsDigit(GetChar(lines, row + 1, col)))
                        partNumbers.Add(GetNumber(lines, row + 1, col));
                    if (char.IsDigit(GetChar(lines, row + 1, col + 1)))
                        partNumbers.Add(GetNumber(lines, row + 1, col + 1));

                    //Part numbers aren't unique, but duplicates don't occur next to the same symbol (at least in my input)
                    //Use a HashSet here to deduplicate, because a symbol could neighbour several digits of the same number.
                    //Copy into a List of allPartNumbers, because that must allow duplicates.
                    foreach (int p in partNumbers)
                        allPartNumbers.Add(p);
                }
            }
        }

        int sum = 0;
        foreach (int i in allPartNumbers)
            sum += i;

        output1 = sum;
    }

    void Run2()
    {

    }

    //Retrieves a single character from the grid, or '.' if the given coords are out of bounds
    char GetChar(string[] lines, int row, int col)
    {
        if(lines.Length == 0 || row < 0 || row >= lines.Length || col < 0 || col >= lines[0].Length)
        {
            return '.';
        }

        return lines[row][col];
    }

    //Retrieves a number from the grid. Coords must be a number, but can be anywhere within it
    int GetNumber(string[] lines, int row, int col)
    {
        int start = col;
        int end = col;

        while (start > 0 && char.IsDigit(lines[row][start]))
            start--;
        while (end < lines[0].Length && char.IsDigit(lines[row][end]))
            end++;

        if(!char.IsDigit(lines[row][start]))
            start++;

        return int.Parse(lines[row].Substring(start, end - start));
    }
}